from bsg_ascii_to_rom import bsg_ascii_to_rom

RC = [
    (2**i if i < 8 else (2**i) ^ (0x11B << (i - 8)))
    for i in range(10)
]

SBOX = [
0x63,0x7C,0x77,0x7B,0xF2,0x6B,0x6F,0xC5,0x30,0x01,0x67,0x2B,0xFE,0xD7,0xAB,0x76,
0xCA,0x82,0xC9,0x7D,0xFA,0x59,0x47,0xF0,0xAD,0xD4,0xA2,0xAF,0x9C,0xA4,0x72,0xC0,
0xB7,0xFD,0x93,0x26,0x36,0x3F,0xF7,0xCC,0x34,0xA5,0xE5,0xF1,0x71,0xD8,0x31,0x15,
0x04,0xC7,0x23,0xC3,0x18,0x96,0x05,0x9A,0x07,0x12,0x80,0xE2,0xEB,0x27,0xB2,0x75,
0x09,0x83,0x2C,0x1A,0x1B,0x6E,0x5A,0xA0,0x52,0x3B,0xD6,0xB3,0x29,0xE3,0x2F,0x84,
0x53,0xD1,0x00,0xED,0x20,0xFC,0xB1,0x5B,0x6A,0xCB,0xBE,0x39,0x4A,0x4C,0x58,0xCF,
0xD0,0xEF,0xAA,0xFB,0x43,0x4D,0x33,0x85,0x45,0xF9,0x02,0x7F,0x50,0x3C,0x9F,0xA8,
0x51,0xA3,0x40,0x8F,0x92,0x9D,0x38,0xF5,0xBC,0xB6,0xDA,0x21,0x10,0xFF,0xF3,0xD2,
0xCD,0x0C,0x13,0xEC,0x5F,0x97,0x44,0x17,0xC4,0xA7,0x7E,0x3D,0x64,0x5D,0x19,0x73,
0x60,0x81,0x4F,0xDC,0x22,0x2A,0x90,0x88,0x46,0xEE,0xB8,0x14,0xDE,0x5E,0x0B,0xDB,
0xE0,0x32,0x3A,0x0A,0x49,0x06,0x24,0x5C,0xC2,0xD3,0xAC,0x62,0x91,0x95,0xE4,0x79,
0xE7,0xC8,0x37,0x6D,0x8D,0xD5,0x4E,0xA9,0x6C,0x56,0xF4,0xEA,0x65,0x7A,0xAE,0x08,
0xBA,0x78,0x25,0x2E,0x1C,0xA6,0xB4,0xC6,0xE8,0xDD,0x74,0x1F,0x4B,0xBD,0x8B,0x8A,
0x70,0x3E,0xB5,0x66,0x48,0x03,0xF6,0x0E,0x61,0x35,0x57,0xB9,0x86,0xC1,0x1D,0x9E,
0xE1,0xF8,0x98,0x11,0x69,0xD9,0x8E,0x94,0x9B,0x1E,0x87,0xE9,0xCE,0x55,0x28,0xDF,
0x8C,0xA1,0x89,0x0D,0xBF,0xE6,0x42,0x68,0x41,0x99,0x2D,0x0F,0xB0,0x54,0xBB,0x16
]

def round_key(k, r=0):
    if r == 0:
        return k
    kl = len(k)

    kg = k[-3:] + [k[kl-4]]
    kg = [SBOX[v] for v in kg]
    kg[0] ^= RC[r-1]

    for i in range(kl):
        if i < 4:
            k[i] ^= kg[i]
        elif kl == 32 and i // 4 == 4:
            k[i] ^= SBOX[k[i-4]]
        else:
            k[i] ^= k[i-4]

    return k

def all_key(k):
    kr = 7 if len(k) == 32 else 8 if len(k) == 24 else 10
    kz = 240 if len(k) == 32 else 208 if len(k) == 24 else 176

    k_all = [k]
    for i in range(1, kr+1):
        knew = round_key(k_all[i-1][:], i)
        k_all.append(knew)

    return [item for sublist in k_all for item in sublist][:kz]

def test():
    k0 = [100]*32
    
    hex_list = [96, 61, 235, 16, 21, 202, 113, 190, 43, 115, 174, 240, 133, 125, 119, 129, 31, 53, 44, 7, 59, 97, 8, 215, 45, 152, 16, 163, 9, 20, 223, 244]
    print("Key0:", ''.join([f'{v:02x}' for v in k0]))

    kr = all_key(hex_list)
    kl = ',\n'.join([''.join([f'{v:02x}' for v in kr[i:i+16]]) for i in range(0, len(kr), 16)])

    print("KeyList:", len(kr) // 16)
    print(kl)


if __name__ == '__main__':
    test()
    # for i in range(len(SBOX)):
    #     print(f"8'h{format(i, '02x')}: rom_data = 8'h{format(SBOX[i], '02x')};")

    #     print(f"#10 rom_addr = 8'h{format(i, '02x')};")
    #   #10 rom_addr = 8'h01;
    
    # f = open("rom_rc.txt", "w")

    # for i in RC:
    #     #  print lines of verilog binary strings, e.g.
    #     #    1001_10101_10011_1101
    #     f.write(f"{i:008b}\n")
    #     # f.write(f"{i:02x}\n")
    #     # print(f"{i:008b}")
    # f.close()
        
    # bsg_ascii_to_rom("rom_rc.txt", "rom_rc", zero=1, spool=open("rom_rc.v", "w"))
    
    
    # print out the string in reverse
    # inverted = "603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4"
    # inverted = [inverted[i:i+2] for i in range(0, len(inverted), 2)]
    # inverted = inverted[::-1]
    # inverted = ''.join(inverted)
    # print(inverted)
    
    # hex_list = ["60", "3d", "eb", "10", "15", "ca", "71", "be", "2b", "73", "ae", "f0", "85", "7d", "77", "81", "1f", "35", "2c", "07", "3b", "61", "08", "d7", "2d", "98", "10", "a3", "09", "14", "df", "f4"]
    # dec_list = [int(i, 16) for i in hex_list]
    # print(dec_list)